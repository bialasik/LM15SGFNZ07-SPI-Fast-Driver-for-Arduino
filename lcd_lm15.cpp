#include "lcd_lm15.h"
#include <SPI.h>

#define csPin 10
#define resetPin 8
#define cdPin 6

unsigned char lcdXpos = 0;        // x cursor position for LCD
unsigned char lcdYpos = 0;        // y cursor position for LCD
unsigned int fgColor = 0x0F00;    // foreground color for LCD (xRGB)
unsigned int bgColor = 0x0FFF;    // background color for LCD (xRGB)

unsigned char initData_lm15[] = { 
0xF4 , 0x90 , 0xB3 , 0xA0 , 0xD0,  0xF0 , 0xE2 , 0xD4 , 0x70 , 0x66 , 
0xB2 , 0xBA , 0xA1 , 0xA3 , 0xAB , 0x94 , 0x95 , 0x95 , 0x95 , 0xF5 , 
0x90,  0xF1 , 0x00 , 0x10 , 0x22 , 0x30 , 0x45 , 0x50 , 0x68 , 0x70 , 
0x8A , 0x90 , 0xAC , 0xB0 , 0xCE , 0xD0,  0xF2 , 0x0F , 0x10 , 0x20 , 
0x30 , 0x43 , 0x50 , 0x66 , 0x70 , 0x89 , 0x90 , 0xAB , 0xB0 , 0xCD , 
0xD0,  0xF3 , 0x0E , 0x10 , 0x2F , 0x30 , 0x40 , 0x50 , 0x64 , 0x70 , 
0x87 , 0x90 , 0xAA , 0xB0 , 0xCB , 0xD0,  0xF4 , 0x0D , 0x10 , 0x2E , 
0x30 , 0x4F , 0x50,  0xF5 , 0x91,  0xF1 , 0x01 , 0x11 , 0x22 , 0x31 , 
0x43 , 0x51 , 0x64 , 0x71 , 0x86 , 0x91 , 0xA8 , 0xB1 , 0xCB , 0xD1, 
0xF2 , 0x0F , 0x11 , 0x21 , 0x31 , 0x42 , 0x51 , 0x63 , 0x71 , 0x85 , 
0x91 , 0xA6 , 0xB1 , 0xC8 , 0xD1,  0xF3 , 0x0B , 0x11 , 0x2F , 0x31 , 
0x41 , 0x51 , 0x62 , 0x71 , 0x83 , 0x91 , 0xA4 , 0xB1 , 0xC6 , 0xD1, 
0xF4 , 0x08 , 0x11 , 0x2B , 0x31 , 0x4F , 0x51 , 0x80 , 0x94, 0xF5 , 
0xA2 , 0xF4 , 0x60 , 0xF0 , 0x40 , 0x50 , 0xC0 , 0xF4 , 0x70 }; 

unsigned char charMap[] = {   // text font for LCD

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 32: Space
0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00,
0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00,
0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00,
0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xd6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00,
0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00,
0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00,
0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00,
0x00, 0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00,
0x00, 0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00,
0x00, 0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00,
0x00, 0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00,
0x00, 0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0e, 0x00,
0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x6c, 0x00, 0x00,
0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7c, 0x38, 0x7c, 0xc6, 0xc6, 0xc6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00,
0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00,
0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x00, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00,
0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1c, 0x36, 0x32, 0x30, 0x7c, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78,
0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c,
0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xd6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00,
0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,
0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00,
0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00
};


void setContrast_LM15(unsigned char contrast) 
{ 
  digitalWrite(cdPin, HIGH); 
  digitalWrite(csPin, LOW); 

  SPI.transfer(0xF4); 
  SPI.transfer(0xB0 | (contrast >> 4)); 
  SPI.transfer(0xA0 | (contrast & 0x0F)); 

  digitalWrite(csPin, HIGH); 
} 

void window_LM15(unsigned char xstart, unsigned char ystart, unsigned char xend, unsigned char yend) 
{ 
   xstart <<= 1; 
   xstart += 6; 
   xend <<= 1; 
   xend += 7; 
   
   digitalWrite(cdPin, HIGH);    
   digitalWrite(csPin, LOW); 
   SPI.transfer(0xF0); 
   SPI.transfer(0x00 | (xstart & 0x0F)); 
   SPI.transfer(0x10 | (xstart >> 4)); 
   SPI.transfer(0x20 | (ystart & 0x0F)); 
   SPI.transfer(0x30 | (ystart >> 4)); 
   SPI.transfer(0xF5); 
   SPI.transfer(0x00 | (xend & 0x0F)); 
   SPI.transfer(0x10 | (xend >> 4)); 
   SPI.transfer(0x20 | (yend & 0x0F)); 
   SPI.transfer(0x30 | (yend >> 4)); 
   digitalWrite(csPin, HIGH); 
   digitalWrite(cdPin, LOW);      
} 

void cursor_LM15(unsigned char row, unsigned char col) 
{ 
   window_LM15(col, row, 100, 79); 
}

void clearLCD_LM15(void) 
{      
   unsigned int i; 

   digitalWrite(cdPin, LOW); 
   digitalWrite(csPin, LOW); 
            
   for(i = 0; i < 8080; i++) 
   { 
      SPI.transfer(0xFF); 
      SPI.transfer(0xFF); 
   }        

   digitalWrite(csPin, HIGH); 
} 


void testLCD_LM15(void) 
{      
   unsigned int i; 

   setCursorLCD_LM15(0,0); 
   digitalWrite(cdPin, LOW); 
   digitalWrite(csPin, LOW); 

   for(i = 0; i < 2020; i++) 
   {                   //white 
      SPI.transfer(0x0F); 
      SPI.transfer(0xFF); 
   }        
   for(i = 0; i < 2020; i++) 
   {                   //red 
      SPI.transfer(0x0F); 
      SPI.transfer(0x00); 
   }  
    
   for(i = 0; i < 2020; i++) 
   {                   //green 
      SPI.transfer(0x00); 
      SPI.transfer(0xF0); 
   }        
   for(i = 0; i < 2020; i++) 
   {                   //blue 
      SPI.transfer(0x00); 
      SPI.transfer(0x0F); 
   }        

   digitalWrite(csPin, HIGH); 
   setCursorLCD_LM15(0,0); 
    
} 

void setCursorLCD_LM15(unsigned char y, unsigned char x)
{
   lcdXpos = x;
   lcdYpos = y;                                  
   if(cursor_LM15)
    (*cursor_LM15)(y, x);   
}

void getCursorLCD_LM15(unsigned char *y, unsigned char *x)
{
   *x = lcdXpos;
   *y = lcdYpos;
}
  
void initLCD_LM15(){
  pinMode(csPin, OUTPUT);      // sets the digital pin as output
  pinMode(cdPin, OUTPUT);      // sets the digital pin as output
  pinMode(resetPin, OUTPUT);      // sets the digital pin as output
    
  unsigned int i; 
  
  SPI.begin(); 
  
  digitalWrite(resetPin, LOW); 
  delay(10); 
  digitalWrite(resetPin, HIGH); 
  delay(10); 
  digitalWrite(cdPin, HIGH); 
  digitalWrite(csPin, LOW); 
    
  for(i = 0; i < sizeof(initData_lm15); i++) 
  { 
    SPI.transfer(initData_lm15[i]);   // send initialization data 
  } 
  delay(1);        
  digitalWrite(csPin, HIGH); 
  delay(1); 
  digitalWrite(csPin, LOW); 

  SPI.transfer(0xF0); 
  SPI.transfer(0x81); 
  SPI.transfer(0xF4); 
  SPI.transfer(0xB3); 
  SPI.transfer(0xA0);   
  SPI.transfer(0xF0); 
  SPI.transfer(0x06); 
  SPI.transfer(0x10); 
  SPI.transfer(0x20); 
  SPI.transfer(0x30); 
  SPI.transfer(0xF5); 
  SPI.transfer(0x0F); 
  SPI.transfer(0x1C); 
  SPI.transfer(0x2F); 
  SPI.transfer(0x34); 
  digitalWrite(csPin, HIGH); 
  digitalWrite(cdPin, LOW); 

  setContrast_LM15(30);  //setting contrast
  cursor_LM15(0,0);      //setting cursor to 0,0
  clearLCD_LM15();       //clear lcd with white color
  }  

  void rectLCD_LM15(unsigned char h, unsigned char w, unsigned char x, unsigned char y, unsigned int color) {
   byte i, j; 

   setCursorLCD_LM15(y,x); 
   digitalWrite(cdPin, LOW); 
   digitalWrite(csPin, LOW); 

  if(80 < (h+y)) h = 80-y;
  if(101 < (w+x)) w = 101-x;

  for(j=0; j < h; j++) {  
     setCursorLCD_LM15(y,x); 
     digitalWrite(cdPin, LOW); 
     digitalWrite(csPin, LOW);  

     for(i = 0; i < w; i++) 
     {                    
        SPI.transfer(color >> 8); 
        SPI.transfer(color & 0xFF); 
     }  
     digitalWrite(csPin, HIGH); 
     y = y+1;
  }  
       

//   digitalWrite(csPin, HIGH); 
   setCursorLCD_LM15(0,0); 
  }

void textLCD_LM15(char *c, unsigned int colortext, unsigned int colorbg)
{                
   unsigned char *pFont;
   unsigned char i, j;  
   unsigned char x, y, value, mask;
      
   getCursorLCD_LM15(&y, &x);

   while(*c)
   {
      window_LM15(x, y, x+7, y+13);
      x += 8;
      digitalWrite(cdPin, LOW);
      digitalWrite(csPin, LOW);
      pFont = &charMap[((unsigned int)(*c) - 32) * 14];            
      for(i = 0; i < 14; i++) {
         value = *pFont;    
         mask = 0x80;
         for(j = 0; j < 8; j++) {
            if(value & mask) {
               SPI.transfer(colortext >> 8);
               SPI.transfer(colortext & 0xFF);
            }
            else {
               SPI.transfer(colorbg >> 8);
               SPI.transfer(colorbg & 0xFF);
            }
            mask >>= 1;
         }
         pFont++;
      }               
      digitalWrite(csPin, HIGH);
      c++;
   }
}

void newlineLCD_LM15(){
  unsigned char x, y;
  getCursorLCD_LM15(&y, &x);
  y += 12;
  setCursorLCD_LM15(y,x);
}
